<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Octopress Blog]]></title>
  <link href="http://deepakkarki.github.io/atom.xml" rel="self"/>
  <link href="http://deepakkarki.github.io/"/>
  <updated>2014-09-13T10:34:08+05:30</updated>
  <id>http://deepakkarki.github.io/</id>
  <author>
    <name><![CDATA[Deepak Karki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AOST Project]]></title>
    <link href="http://deepakkarki.github.io/blog/2014/09/12/aost-project/"/>
    <updated>2014-09-12T20:39:10+05:30</updated>
    <id>http://deepakkarki.github.io/blog/2014/09/12/aost-project</id>
    <content type="html"><![CDATA[<p>This semester, I have chosen AOST (Architecture of Open Source Technologies) as my group C elective. As a part of the course we are required to contribute to an open source project.
I&rsquo;m pleased to announce that me and my teammate Aishwarya, will be contributing to PyBBIO <link>.</p>

<hr />

<p>PyBBIO aims to provide a arduino like interface for controlling the IO modules on the BeagleBone Black. Currently there is support for GPIO, UART, SPI, I2C, Camera and host of other sensors. We plan to contribute the BBIO-Server library through the course of the semester. BBIO-Server will be an extremely versatile tool for developing IoT prototypes. It will have all the necessary components ranging from UI to a RESTful backend service that enables interacting with the BeagleBone&rsquo;s IO (using PyBBIO) across an HTTP connection.</p>

<p>Specifics of the project include :</p>

<ul>
<li><p> Creating a RESTful API to access hardware interfaces via PyBBIO (can be thought of as making RPCs).</p>

<p>For example to initialize a sensor <code>PUT /bbio/spi/adt7310  "{'bus':'SPI1','cs':'GPIO1_16'}"</code> or to get a value <code>GET /bbio/spi/adt7310/temp "{'units':'C'}"</code></p></li>
<li> A javascript frontend API (ajax based) for making calls to the server (wrapper for the RESTful HTTP service)</li>
<li> Interface for full duplex data streaming using Socket.io</li>
<li> Standard set of UI components (integrated with Freeboard) to get the developer started with zero effort.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Look at PRU Speak API]]></title>
    <link href="http://deepakkarki.github.io/blog/2014/06/14/first-look-at-pru-speak-api/"/>
    <updated>2014-06-14T20:13:42+05:30</updated>
    <id>http://deepakkarki.github.io/blog/2014/06/14/first-look-at-pru-speak-api</id>
    <content type="html"><![CDATA[<p>I managed to get a basic ARM userspace to PRU interaction up and running and even wrote a python API to take care of the interactions.
Here is how the API looks like!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">pru_speak</span>
</span><span class='line'>
</span><span class='line'><span class="n">botspeak_code</span>   <span class="o">=</span> \
</span><span class='line'><span class="sd">&#39;&#39;&#39;     SET DIO[0] , 1</span>
</span><span class='line'><span class="sd">        WAIT 1</span>
</span><span class='line'><span class="sd">        SET DIO[0], 0</span>
</span><span class='line'><span class="sd">        WAIT 1</span>
</span><span class='line'><span class="sd">        GOTO 0&#39;&#39;&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">pru_speak</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">botspeak_code</span><span class="p">)</span>
</span><span class='line'><span class="n">pru_speak</span><span class="o">.</span><span class="n">execute</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PRU Speak - Project Updates]]></title>
    <link href="http://deepakkarki.github.io/blog/2014/06/02/internals-of-pru-speak/"/>
    <updated>2014-06-02T00:05:57+05:30</updated>
    <id>http://deepakkarki.github.io/blog/2014/06/02/internals-of-pru-speak</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been over two weeks since I started on my <a href="https://github.com/deepakkarki/pruspeak">GSoC project</a>, and what a journey it&rsquo;s been! Reading thousands of lines of kernel code, prototyping my own drivers and involved discussions with the community members :D</p>

<p>Here is the update :</p>

<ul>
<li>Tried out character drivers</li>
<li>Developed my own sysfs driver with support for both binary and device files.</li>
<li>Hacked on my mentors driver.</li>
<li>Got upcalls and down calls working.</li>
<li>Developed some C + Assembly based firmware for the PRU</li>
<li>Shared memory implementation between the kernel and PRU.</li>
<li>currently working on exporting the shared memory to userspace.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The PRU Speak Project]]></title>
    <link href="http://deepakkarki.github.io/blog/2014/05/17/the-pru-speak-project/"/>
    <updated>2014-05-17T22:54:41+05:30</updated>
    <id>http://deepakkarki.github.io/blog/2014/05/17/the-pru-speak-project</id>
    <content type="html"><![CDATA[<p>I received some really good news earlier this month! I had been selected for <a href="http://www.google-melange.com/gsoc/homepage/google/gsoc2014">GSoC 2014</a>!</p>

<p><img class="center" src="http://deepakkarki.github.io/images/the-pru-speak-project/GSoC-2014.jpg" title="GSoC-2014" ></p>

<p>The project I will be working on the <a href="https://github.com/deepakkarki/pruspeak">PRU Speak</a> project for <a href="http://www.beagleboard.org/">Beagleboard</a> this summer :D
The summary of all the projects that have been selected for GSoC-2014 @ Beagleboard is put up at the official <a href="http://elinux.org/BeagleBoard/GSoC/2014_Projects">projects page</a></p>

<p><img class="center" src="http://deepakkarki.github.io/images/the-pru-speak-project/BBB-logo.jpg" title="Beaglebone black logo" ></p>

<p>The key motivation behind my project is to make simple the control of the PRU from an userspace process in Linux running on ARM. This is done by developing a custom firmware for the PRU and an API frontend for the user space application to use. A kernel driver forms the bridge between the user spcae library and the PRU firmware, (i.e.) API &lt;&mdash;> Driver &lt;&mdash;> firmware on PRU.</p>

<p><img class="center" src="http://deepakkarki.github.io/images/the-pru-speak-project/beagleboneblack.png" title="Beaglebone black" ></p>

<p>Here is a small video I wipped up for the organisation that summarizes my project!</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/8g8e4AgDqNo " height="380" width="680"></iframe></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World!]]></title>
    <link href="http://deepakkarki.github.io/blog/2014/05/02/hello-world/"/>
    <updated>2014-05-02T13:30:02+05:30</updated>
    <id>http://deepakkarki.github.io/blog/2014/05/02/hello-world</id>
    <content type="html"><![CDATA[<p>This is my first post on this blog :D  As we programers always do, I will start with a <strong>Hello World</strong> program!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include&lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span> <span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span> <span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Hello World!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p><strong>In some python now</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">print</span> <span class="s">&quot;Hello World&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>yes, I just could not leave out <strong>python</strong>!</p>
]]></content>
  </entry>
  
</feed>
