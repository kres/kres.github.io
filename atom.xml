<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[KRES]]></title>
  <link href="http://kres.github.io/atom.xml" rel="self"/>
  <link href="http://kres.github.io/"/>
  <updated>2014-10-05T19:27:56+05:30</updated>
  <id>http://kres.github.io/</id>
  <author>
    <name><![CDATA[Deepak Karki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[BBIO-Server Development - 1]]></title>
    <link href="http://kres.github.io/blog/2014/10/04/bbio-server-development-1/"/>
    <updated>2014-10-04T15:48:35+05:30</updated>
    <id>http://kres.github.io/blog/2014/10/04/bbio-server-development-1</id>
    <content type="html"><![CDATA[<p>As we work on BBIO-Server, we will keep the community updated through this blog. The series of posts will discuss the various steps and design decisions taken by us while developing this library.
In this post we will explain how we setup the environment to get started and start using the PyBBIO API.</p>

<h2>Environment Setup</h2>

<ol>
<li>Fork Alexander Hiam&rsquo;s <a href="https://github.com/alexanderhiam/PyBBIO">upstream repository</a> to our <a href="https://github.com/kres/PyBBIO/">master</a>. The master is where we will be adding our library, which is to be upstreamed once complete.</li>
<li>Install the dependencies for PyBBIO as given <a href="https://github.com/alexanderhiam/PyBBIO/wiki/Installing-PyBBIO">here</a> in the official wiki.</li>
<li>Clone our master repository from github, create a BBIO-Server-dev branch.</li>
<li>Install the code from source, by running setup.py, viz present in the root directory of the project.</li>
<li>Install Flask : <code>pip install Flask</code></li>
</ol>


<p>This is how we setup the environment to get started.</p>

<h2>Using PyBBIO</h2>

<p>Deepak has written a nice tutorial on using the PyBBIO API <a href="https://github.com/alexanderhiam/PyBBIO/wiki/Using-PyBBIO">here</a>.</p>

<h2>Official development branch</h2>

<p>The official development tree is <a href="https://github.com/kres/PyBBIO/tree/bbio-server-dev">here</a>. This is where we will be commiting our code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BBIO-Server]]></title>
    <link href="http://kres.github.io/blog/2014/09/25/bbio-server/"/>
    <updated>2014-09-25T21:42:15+05:30</updated>
    <id>http://kres.github.io/blog/2014/09/25/bbio-server</id>
    <content type="html"><![CDATA[<p>As we had talked about in our last post, We&rsquo;ll be working on BBIO-Server as our AOST (Architecture of Open Source Technologies) project. This will be an extension to Alexander Hiam&rsquo;s work, <a href="https://github.com/alexanderhiam/PyBBIO">PyBBIO</a>!</p>

<p>Currently the <a href="https://github.com/alexanderhiam/PyBBIO/blob/master/libraries/BBIOServer">BBIO-Server</a> is implemented as a library in the PyBBIO project. It enables the users to build a web page via a python API. Lambda functions help enable the RPC mechanisim to link user action on the web page to hardware actions on the Beaglebone Black. <a href="https://github.com/alexanderhiam/PyBBIO/wiki/BBIOServer">Here</a> is the overview of how to use the API.</p>

<pre><code>NOTE : These links will change overtime, the current library may soon be depreciated. 
</code></pre>

<p>Our proposal is to replace the current implementation as it has a few shortcomings. One of the problem being that there is no clean way to access hardware end points from the client side. The page has to be built using the BBIO-Server API; there is no other generic way to access the IO pins on the board. We plan to tackle this problem by developing a RESTful API to access hardware as follows :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GET /bone/gpio/2?pin=3</span></code></pre></td></tr></table></div></figure>


<p>gets the status of pin 3 of the 2nd GPIO module (the BBB has 4 GPIO modules). To set the pin status,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>POST /bone/gpio/2 {pin : 3, status : "HIGH"}</span></code></pre></td></tr></table></div></figure>


<p>to setup a sensor/actuator on a paritcular port, we will be using the PUT request</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PUT /bone/pwm/1 {pin : 2, type : "SERVO"}</span></code></pre></td></tr></table></div></figure>


<p>Also the current implementation is a custom built HTTP server using the python HTTP API. It makes more sense to use a existing lite server side framework such as <a href="http://flask.pocoo.org/">Flask</a>.</p>

<p>Another limitation of the current implementation is that you can&rsquo;t directly access the hardware from the client side, i.e. you have to build the page using the python API only, which is not very nice for most developers. This calls for a neat javascript based API which will give developers a neat way to control the BBB via a web interface. Such as</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>digitalWrite(1, HIGH);
</span><span class='line'>servo.setAngle(120);</span></code></pre></td></tr></table></div></figure>


<p>Additionally we propose to create an API for data streaming via web-sockets/web-rtc. This will be useful for sensor data graphing and video camera display.</p>

<p>Finally developers would like to have ready to use UI components at their hands, and for this purpose we will be integrating BBIO-Server with <a href="https://freeboard.io/">Freeboard</a> and also adding our custom UI components!</p>

<p>Note : A similar project is <a href="https://code.google.com/p/webiopi/">Web-IO-Pi</a> which enables web page based hardware control on the Raspberry PI.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOST Project]]></title>
    <link href="http://kres.github.io/blog/2014/09/12/aost-project/"/>
    <updated>2014-09-12T20:39:10+05:30</updated>
    <id>http://kres.github.io/blog/2014/09/12/aost-project</id>
    <content type="html"><![CDATA[<p>This semester, I have chosen AOST (Architecture of Open Source Technologies) as my group C elective. As a part of the course we are required to contribute to an open source project.
I&rsquo;m pleased to announce that me and my teammate Aishwarya, will be contributing to PyBBIO <link>.</p>

<hr />

<p>PyBBIO aims to provide a arduino like interface for controlling the IO modules on the BeagleBone Black. Currently there is support for GPIO, UART, SPI, I2C, Camera and host of other sensors. We plan to contribute the BBIO-Server library through the course of the semester. BBIO-Server will be an extremely versatile tool for developing IoT prototypes. It will have all the necessary components ranging from UI to a RESTful backend service that enables interacting with the BeagleBone&rsquo;s IO (using PyBBIO) across an HTTP connection.</p>

<p>Specifics of the project include :</p>

<ul>
<li><p> Creating a RESTful API to access hardware interfaces via PyBBIO (can be thought of as making RPCs).</p>

<p>For example to initialize a sensor <code>PUT /bbio/spi/adt7310  "{'bus':'SPI1','cs':'GPIO1_16'}"</code> or to get a value <code>GET /bbio/spi/adt7310/temp "{'units':'C'}"</code></p></li>
<li> A javascript frontend API (ajax based) for making calls to the server (wrapper for the RESTful HTTP service)</li>
<li> Interface for full duplex data streaming using Socket.io</li>
<li> Standard set of UI components (integrated with Freeboard) to get the developer started with zero effort.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Look at PRU Speak API]]></title>
    <link href="http://kres.github.io/blog/2014/06/14/first-look-at-pru-speak-api/"/>
    <updated>2014-06-14T20:13:42+05:30</updated>
    <id>http://kres.github.io/blog/2014/06/14/first-look-at-pru-speak-api</id>
    <content type="html"><![CDATA[<p>I managed to get a basic ARM userspace to PRU interaction up and running and even wrote a python API to take care of the interactions.
Here is how the API looks like!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">pru_speak</span>
</span><span class='line'>
</span><span class='line'><span class="n">botspeak_code</span>   <span class="o">=</span> \
</span><span class='line'><span class="sd">&#39;&#39;&#39;     SET DIO[0] , 1</span>
</span><span class='line'><span class="sd">        WAIT 1</span>
</span><span class='line'><span class="sd">        SET DIO[0], 0</span>
</span><span class='line'><span class="sd">        WAIT 1</span>
</span><span class='line'><span class="sd">        GOTO 0&#39;&#39;&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">pru_speak</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">botspeak_code</span><span class="p">)</span>
</span><span class='line'><span class="n">pru_speak</span><span class="o">.</span><span class="n">execute</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PRU Speak - Project Updates]]></title>
    <link href="http://kres.github.io/blog/2014/06/02/internals-of-pru-speak/"/>
    <updated>2014-06-02T00:05:57+05:30</updated>
    <id>http://kres.github.io/blog/2014/06/02/internals-of-pru-speak</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been over two weeks since I started on my <a href="https://github.com/deepakkarki/pruspeak">GSoC project</a>, and what a journey it&rsquo;s been! Reading thousands of lines of kernel code, prototyping my own drivers and involved discussions with the community members :D</p>

<p>Here is the update :</p>

<ul>
<li>Tried out character drivers</li>
<li>Developed my own sysfs driver with support for both binary and device files.</li>
<li>Hacked on my mentors driver.</li>
<li>Got upcalls and down calls working.</li>
<li>Developed some C + Assembly based firmware for the PRU</li>
<li>Shared memory implementation between the kernel and PRU.</li>
<li>currently working on exporting the shared memory to userspace.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The PRU Speak Project]]></title>
    <link href="http://kres.github.io/blog/2014/05/17/the-pru-speak-project/"/>
    <updated>2014-05-17T22:54:41+05:30</updated>
    <id>http://kres.github.io/blog/2014/05/17/the-pru-speak-project</id>
    <content type="html"><![CDATA[<p>I received some really good news earlier this month! I had been selected for <a href="http://www.google-melange.com/gsoc/homepage/google/gsoc2014">GSoC 2014</a>!</p>

<p><img class="center" src="http://kres.github.io/images/the-pru-speak-project/GSoC-2014.jpg" title="GSoC-2014" ></p>

<p>The project I will be working on the <a href="https://github.com/deepakkarki/pruspeak">PRU Speak</a> project for <a href="http://www.beagleboard.org/">Beagleboard</a> this summer :D
The summary of all the projects that have been selected for GSoC-2014 @ Beagleboard is put up at the official <a href="http://elinux.org/BeagleBoard/GSoC/2014_Projects">projects page</a></p>

<p><img class="center" src="http://kres.github.io/images/the-pru-speak-project/BBB-logo.jpg" title="Beaglebone black logo" ></p>

<p>The key motivation behind my project is to make simple the control of the PRU from an userspace process in Linux running on ARM. This is done by developing a custom firmware for the PRU and an API frontend for the user space application to use. A kernel driver forms the bridge between the user spcae library and the PRU firmware, (i.e.) API &lt;&mdash;> Driver &lt;&mdash;> firmware on PRU.</p>

<p><img class="center" src="http://kres.github.io/images/the-pru-speak-project/beagleboneblack.png" title="Beaglebone black" ></p>

<p>Here is a small video I wipped up for the organisation that summarizes my project!</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/8g8e4AgDqNo " height="380" width="680"></iframe></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World!]]></title>
    <link href="http://kres.github.io/blog/2014/05/02/hello-world/"/>
    <updated>2014-05-02T13:30:02+05:30</updated>
    <id>http://kres.github.io/blog/2014/05/02/hello-world</id>
    <content type="html"><![CDATA[<p>This is my first post on this blog :D  As we programers always do, I will start with a <strong>Hello World</strong> program!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include&lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span> <span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span> <span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Hello World!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p><strong>In some python now</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">print</span> <span class="s">&quot;Hello World&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>yes, I just could not leave out <strong>python</strong>!</p>
]]></content>
  </entry>
  
</feed>
