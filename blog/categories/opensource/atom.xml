<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Opensource | KRES]]></title>
  <link href="http://kres.github.io/blog/categories/opensource/atom.xml" rel="self"/>
  <link href="http://kres.github.io/"/>
  <updated>2014-11-06T14:57:58+05:30</updated>
  <id>http://kres.github.io/</id>
  <author>
    <name><![CDATA[Deepak Karki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[BBIO-Server Is Now Zygote]]></title>
    <link href="http://kres.github.io/blog/2014/11/06/bbio-server-is-now-zygote/"/>
    <updated>2014-11-06T14:10:36+05:30</updated>
    <id>http://kres.github.io/blog/2014/11/06/bbio-server-is-now-zygote</id>
    <content type="html"><![CDATA[<p>To make the project generic and portable, we are moving the <strong>BBIO-Server</strong> code out the the PyBBIO repository and have created a new project at <a href="https://github.com/kres/zygote">zygote</a></p>

<p>The architecture is as shown in the diagram :
<img src="https://raw.githubusercontent.com/wiki/kres/zygote/zygote-architecture.png" class="centre" title="Zygote-Architecture"/></p>

<p>The base block seen in red represents the hardware platform (Raspberry PI, Beaglebone Black, Radaxa board, etc.) on which the application runs on. The platform should have a python based IO library which the zygote server can utilize. There is a generic IO library mapping that happens which maps the board specific python functions to a generic interface which the zygote-server (Flask based RESTful server) uses. This layer also takes a python dictionary which contains the board configurations. The Flask server will use the generic interface to expose a REST api to the external world.</p>

<p>This REST api can be accessed through a mobile or web client, as shown in the diagram.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BBIO-Server Development - 2]]></title>
    <link href="http://kres.github.io/blog/2014/10/22/bbio-server-development-2/"/>
    <updated>2014-10-22T21:54:30+05:30</updated>
    <id>http://kres.github.io/blog/2014/10/22/bbio-server-development-2</id>
    <content type="html"><![CDATA[<p>Currently we have developed the basic RESTful API for the BBIO-Server. The functionality currently supported includes : GPIO, PWM, analog in, Servo and custom modules.</p>

<p>Sample interfaces
```</p>

<p>GPIO handler :</p>

<pre><code>GET /gpio/1/16?task=write&amp;state=HIGH    :: sets pin GPIO1_16 high
GET /gpio/1/16?task=config&amp;mode=INPUT   :: sets pin to input mode
GET     /gpio/1/16?task=read                :: reads pin, returns status
</code></pre>

<p>PWM handler :</p>

<pre><code>pwm to work with default configuration.
i.e. freq = 10KHz and resolution = 8 bit

pin to pwm mapping :-
P8.13 - PWM2B
P8.19 - PWM2A
P9.14 - PWM1A
P9.16 - PWM1B

GET /pwm/1A?value=10
</code></pre>

<p>Analog In :</p>

<pre><code>function to handle ADC read requests. 
Input can be from 0 - 1.8V, o/p of 12 bit resolution

P9.33 - AIN4
P9.35 - AIN6
P9.36 - AIN5
P9.37 - AIN2
P9.38 - AIN3
P9.39 - AIN0

GET /adc/AIN0 =&gt; returns the analog input at channel 0
</code></pre>

<p>Servo controller :</p>

<pre><code>each servo is attached to a PWM module

GET /servo/PWM1A?config=enable  =&gt; enables this module
GET /servo/PWM1A?angle=50   =&gt; moves servo to 50 deg
GET /servo/PWM1A?config=disable =&gt; disables this module
</code></pre>

<p>```</p>

<p>Here is the code that has been currently written :</p>

<script src="https://gist.github.com/deepakkarki/5e767d25dd2fae4a07b8.js"></script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BBIO-Server Development - 1]]></title>
    <link href="http://kres.github.io/blog/2014/10/04/bbio-server-development-1/"/>
    <updated>2014-10-04T15:48:35+05:30</updated>
    <id>http://kres.github.io/blog/2014/10/04/bbio-server-development-1</id>
    <content type="html"><![CDATA[<p>As we work on BBIO-Server, we will keep the community updated through this blog. The series of posts will discuss the various steps and design decisions taken by us while developing this library.
In this post we will explain how we setup the environment to get started and start using the PyBBIO API.</p>

<h2>Environment Setup</h2>

<ol>
<li>Fork Alexander Hiam&rsquo;s <a href="https://github.com/alexanderhiam/PyBBIO">upstream repository</a> to our <a href="https://github.com/kres/PyBBIO/">master</a>. The master is where we will be adding our library, which is to be upstreamed once complete.</li>
<li>Install the dependencies for PyBBIO as given <a href="https://github.com/alexanderhiam/PyBBIO/wiki/Installing-PyBBIO">here</a> in the official wiki.</li>
<li>Clone our master repository from github, create a BBIO-Server-dev branch.</li>
<li>Install the code from source, by running setup.py, viz present in the root directory of the project.</li>
<li>Install Flask : <code>pip install Flask</code></li>
</ol>


<p>This is how we setup the environment to get started.</p>

<h2>Using PyBBIO</h2>

<p>Deepak has written a nice tutorial on using the PyBBIO API <a href="https://github.com/alexanderhiam/PyBBIO/wiki/Using-PyBBIO">here</a>.</p>

<h2>Official development branch</h2>

<p>The official development tree is <a href="https://github.com/kres/PyBBIO/tree/bbio-server-dev">here</a>. This is where we will be commiting our code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BBIO-Server]]></title>
    <link href="http://kres.github.io/blog/2014/09/25/bbio-server/"/>
    <updated>2014-09-25T21:42:15+05:30</updated>
    <id>http://kres.github.io/blog/2014/09/25/bbio-server</id>
    <content type="html"><![CDATA[<p>As we had talked about in our last post, We&rsquo;ll be working on BBIO-Server as our AOST (Architecture of Open Source Technologies) project. This will be an extension to Alexander Hiam&rsquo;s work, <a href="https://github.com/alexanderhiam/PyBBIO">PyBBIO</a>!</p>

<p>Currently the <a href="https://github.com/alexanderhiam/PyBBIO/blob/master/libraries/BBIOServer">BBIO-Server</a> is implemented as a library in the PyBBIO project. It enables the users to build a web page via a python API. Lambda functions help enable the RPC mechanisim to link user action on the web page to hardware actions on the Beaglebone Black. <a href="https://github.com/alexanderhiam/PyBBIO/wiki/BBIOServer">Here</a> is the overview of how to use the API.</p>

<pre><code>NOTE : These links will change overtime, the current library may soon be depreciated. 
</code></pre>

<p>Our proposal is to replace the current implementation as it has a few shortcomings. One of the problem being that there is no clean way to access hardware end points from the client side. The page has to be built using the BBIO-Server API; there is no other generic way to access the IO pins on the board. We plan to tackle this problem by developing a RESTful API to access hardware as follows :
<code>
GET /bone/gpio/2?pin=3
</code>
gets the status of pin 3 of the 2nd GPIO module (the BBB has 4 GPIO modules). To set the pin status,
<code>
POST /bone/gpio/2 {pin : 3, status : "HIGH"}
</code>
to setup a sensor/actuator on a paritcular port, we will be using the PUT request
<code>
PUT /bone/pwm/1 {pin : 2, type : "SERVO"}
</code></p>

<p>Also the current implementation is a custom built HTTP server using the python HTTP API. It makes more sense to use a existing lite server side framework such as <a href="http://flask.pocoo.org/">Flask</a>.</p>

<p>Another limitation of the current implementation is that you can&rsquo;t directly access the hardware from the client side, i.e. you have to build the page using the python API only, which is not very nice for most developers. This calls for a neat javascript based API which will give developers a neat way to control the BBB via a web interface. Such as
<code>
digitalWrite(1, HIGH);
servo.setAngle(120);
</code>
Additionally we propose to create an API for data streaming via web-sockets/web-rtc. This will be useful for sensor data graphing and video camera display.</p>

<p>Finally developers would like to have ready to use UI components at their hands, and for this purpose we will be integrating BBIO-Server with <a href="https://freeboard.io/">Freeboard</a> and also adding our custom UI components!</p>

<p>Note : A similar project is <a href="https://code.google.com/p/webiopi/">Web-IO-Pi</a> which enables web page based hardware control on the Raspberry PI.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Look at PRU Speak API]]></title>
    <link href="http://kres.github.io/blog/2014/06/14/first-look-at-pru-speak-api/"/>
    <updated>2014-06-14T20:13:42+05:30</updated>
    <id>http://kres.github.io/blog/2014/06/14/first-look-at-pru-speak-api</id>
    <content type="html"><![CDATA[<p>I managed to get a basic ARM userspace to PRU interaction up and running and even wrote a python API to take care of the interactions.
Here is how the API looks like!</p>

<p>```python
import pru_speak</p>

<p>botspeak_code   = \
&lsquo;&rsquo;&lsquo;     SET DIO[0] , 1</p>

<pre><code>    WAIT 1
    SET DIO[0], 0
    WAIT 1
    GOTO 0'''
</code></pre>

<p>pru_speak.load(botspeak_code)
pru_speak.execute()
```</p>
]]></content>
  </entry>
  
</feed>
