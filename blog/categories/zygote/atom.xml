<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Zygote | KRES]]></title>
  <link href="http://kres.github.io/blog/categories/zygote/atom.xml" rel="self"/>
  <link href="http://kres.github.io/"/>
  <updated>2014-11-06T14:57:58+05:30</updated>
  <id>http://kres.github.io/</id>
  <author>
    <name><![CDATA[Deepak Karki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[BBIO-Server Is Now Zygote]]></title>
    <link href="http://kres.github.io/blog/2014/11/06/bbio-server-is-now-zygote/"/>
    <updated>2014-11-06T14:10:36+05:30</updated>
    <id>http://kres.github.io/blog/2014/11/06/bbio-server-is-now-zygote</id>
    <content type="html"><![CDATA[<p>To make the project generic and portable, we are moving the <strong>BBIO-Server</strong> code out the the PyBBIO repository and have created a new project at <a href="https://github.com/kres/zygote">zygote</a></p>

<p>The architecture is as shown in the diagram :
<img src="https://raw.githubusercontent.com/wiki/kres/zygote/zygote-architecture.png" class="centre" title="Zygote-Architecture"/></p>

<p>The base block seen in red represents the hardware platform (Raspberry PI, Beaglebone Black, Radaxa board, etc.) on which the application runs on. The platform should have a python based IO library which the zygote server can utilize. There is a generic IO library mapping that happens which maps the board specific python functions to a generic interface which the zygote-server (Flask based RESTful server) uses. This layer also takes a python dictionary which contains the board configurations. The Flask server will use the generic interface to expose a REST api to the external world.</p>

<p>This REST api can be accessed through a mobile or web client, as shown in the diagram.</p>
]]></content>
  </entry>
  
</feed>
