<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: AOST | My Octopress Blog]]></title>
  <link href="http://deepakkarki.github.io/blog/categories/aost/atom.xml" rel="self"/>
  <link href="http://deepakkarki.github.io/"/>
  <updated>2014-09-27T21:40:44+05:30</updated>
  <id>http://deepakkarki.github.io/</id>
  <author>
    <name><![CDATA[Deepak Karki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[BBIO-Server]]></title>
    <link href="http://deepakkarki.github.io/blog/2014/09/25/bbio-server/"/>
    <updated>2014-09-25T21:42:15+05:30</updated>
    <id>http://deepakkarki.github.io/blog/2014/09/25/bbio-server</id>
    <content type="html"><![CDATA[<p>As we had talked about in our last post, We&rsquo;ll be working on BBIO-Server as our AOST (Architecture of Open Source Technologies) project. This will be an extension to Alexander Hiam&rsquo;s work, <a href="https://github.com/alexanderhiam/PyBBIO">PyBBIO</a>!</p>

<p>Currently the <a href="https://github.com/alexanderhiam/PyBBIO/blob/master/libraries/BBIOServer">BBIO-Server</a> is implemented as a library in the PyBBIO project. It enables the users to build a web page via a python API. Lambda functions help enable the RPC mechanisim to link user action on the web page to hardware actions on the Beaglebone Black. <a href="https://github.com/alexanderhiam/PyBBIO/wiki/BBIOServer">Here</a> is the overview of how to use the API.</p>

<pre><code>NOTE : These links will change overtime, the current library may soon be depreciated. 
</code></pre>

<p>Our proposal is to replace the current implementation as it has a few shortcomings. One of the problem being that there is no clean way to access hardware end points from the client side. The page has to be built using the BBIO-Server API; there is no other generic way to access the IO pins on the board. We plan to tackle this problem by developing a RESTful API to access hardware as follows :
<code>
GET /bone/gpio/2?pin=3
</code>
gets the status of pin 3 of the 2nd GPIO module (the BBB has 4 GPIO modules). To set the pin status,
<code>
POST /bone/gpio/2 {pin : 3, status : "HIGH"}
</code>
to setup a sensor/actuator on a paritcular port, we will be using the PUT request
<code>
PUT /bone/pwm/1 {pin : 2, type : "SERVO"}
</code></p>

<p>Also the current implementation is a custom built HTTP server using the python HTTP API. It makes more sense to use a existing lite server side framework such as <a href="http://flask.pocoo.org/">Flask</a>.</p>

<p>Another limitation of the current implementation is that you can&rsquo;t directly access the hardware from the client side, i.e. you have to build the page using the python API only, which is not very nice for most developers. This calls for a neat javascript based API which will give developers a neat way to control the BBB via a web interface. Such as
<code>
digitalWrite(1, HIGH);
servo.setAngle(120);
</code>
Additionally we propose to create an API for data streaming via web-sockets/web-rtc. This will be useful for sensor data graphing and video camera display.</p>

<p>Finally developers would like to have ready to use UI components at their hands, and for this purpose we will be integrating BBIO-Server with <a href="https://freeboard.io/">Freeboard</a> and also adding our custom UI components!</p>

<p>Note : A similar project is <a href="https://code.google.com/p/webiopi/">Web-IO-Pi</a> which enables web page based hardware control on the Raspberry PI.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOST Project]]></title>
    <link href="http://deepakkarki.github.io/blog/2014/09/12/aost-project/"/>
    <updated>2014-09-12T20:39:10+05:30</updated>
    <id>http://deepakkarki.github.io/blog/2014/09/12/aost-project</id>
    <content type="html"><![CDATA[<p>This semester, I have chosen AOST (Architecture of Open Source Technologies) as my group C elective. As a part of the course we are required to contribute to an open source project.
I&rsquo;m pleased to announce that me and my teammate Aishwarya, will be contributing to PyBBIO <link>.</p>

<hr />

<p>PyBBIO aims to provide a arduino like interface for controlling the IO modules on the BeagleBone Black. Currently there is support for GPIO, UART, SPI, I2C, Camera and host of other sensors. We plan to contribute the BBIO-Server library through the course of the semester. BBIO-Server will be an extremely versatile tool for developing IoT prototypes. It will have all the necessary components ranging from UI to a RESTful backend service that enables interacting with the BeagleBone&rsquo;s IO (using PyBBIO) across an HTTP connection.</p>

<p>Specifics of the project include :</p>

<ul>
<li><p> Creating a RESTful API to access hardware interfaces via PyBBIO (can be thought of as making RPCs).</p>

<p>For example to initialize a sensor <code>PUT /bbio/spi/adt7310  "{'bus':'SPI1','cs':'GPIO1_16'}"</code> or to get a value <code>GET /bbio/spi/adt7310/temp "{'units':'C'}"</code></p></li>
<li> A javascript frontend API (ajax based) for making calls to the server (wrapper for the RESTful HTTP service)</li>
<li> Interface for full duplex data streaming using Socket.io</li>
<li> Standard set of UI components (integrated with Freeboard) to get the developer started with zero effort.</li>
</ul>

]]></content>
  </entry>
  
</feed>
